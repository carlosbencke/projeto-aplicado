substitutions:
  _IMAGE_NAME: us-east1-docker.pkg.dev/dazzling-matrix-436301-j5/imagens/app-vulneravel:latest
  _RUN_VULN_SCAN: "true" # Controla a execução do step de Scan de Vulnerabilidades (true or false)


# Options Globais
options:
  substitutionOption: ALLOW_LOOSE #IGNORA VARIAVEIS "substitutions" AUSENTES
  logging: CLOUD_LOGGING_ONLY

steps:


# Build Docker Image
- id: 'Build Docker Image'
  name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_IMAGE_NAME', '.', '-f', dockerfile]
  dir: '${_DIR}'

# Run a Vulnerability Scan at _SECURITY level and Analyze the result
- id: 'Vulnerability Scan'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ "$_RUN_VULN_SCAN" == "true" ]]
    then
      # Rodar a análise de vulnerabilidades e salvar o scan_id
      gcloud artifacts docker images scan \
        $_IMAGE_NAME \
        --location us \
        --format="value(response.scan)" > /workspace/scan_id.txt

      # Listar vulnerabilidades e contar severidades
      scan=$(gcloud artifacts docker images list-vulnerabilities \
        $(cat /workspace/scan_id.txt) \
        --format="value(vulnerability.effectiveSeverity)")

      critical_count=$(echo "$scan" | grep -cx 'CRITICAL')
      high_count=$(echo "$scan" | grep -cx 'HIGH')
      medium_count=$(echo "$scan" | grep -cx 'MEDIUM')
      low_count=$(echo "$scan" | grep -cx 'LOW')
      total_count=$(echo "$scan" | wc -l)

      # Mensagem para o Slack
      slack_message="Análise de vulnerabilidades realizada em $_IMAGE_NAME\nCRITICAL: $critical_count\nHIGH: $high_count\nMEDIUM: $medium_count\nLOW: $low_count\nTotal de vulnerabilidades: $total_count"

      # URL do Webhook do Slack
      webhook_url="https://hooks.slack.com/services/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"

      # Criar o payload em uma linha
      payload=$(cat <<EOF
    {
      "text": "$slack_message"
    }
    EOF
    )

      # Enviar o payload para o webhook do Slack
      curl -X POST -H 'Content-type: application/json' --data "$payload" "$webhook_url"

      # Verificar vulnerabilidade CRITICAL e parar o pipeline, se necessário
      if echo "$scan" | grep -xq 'CRITICAL'; then
        echo "Vulnerability CRITICAL level found! Pipeline Canceled!" 
        exit 0
      else
        echo "No CRITICAL vulnerability found, congrats!"
        exit 0
      fi
    else
      echo "Scan de Vulnerabilidades Desabilitado. Passando para o próximo step..."
    fi



# Pushing image to Artifact Registry
- id: 'Push Docker App Image'
  name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_IMAGE_NAME']
  dir: '${_DIR}'

